#!/usr/bin/env python3
"""
Whisper + Claude Code 音声記事化システム
APIコストゼロ・ローカル文字起こし対応
"""

import os
import sys
import argparse
import tempfile
import subprocess
from pathlib import Path
import whisper
from dotenv import load_dotenv
import anthropic
import pyperclip

# 環境変数の読み込み
load_dotenv()

class WhisperTranscriber:
    def __init__(self):
        # Whisperモデルの初期化
        self.model = None
        self.model_name = "base"  # base, small, medium, large から選択可能
        
        # 文体学習用ファイルパス
        self.style_file_path = "/Users/manami/(N)note本文.md"
        
        # 文体サンプルを読み込み
        self.style_text = self.load_style_sample()
        
        # Claude API クライアント初期化
        self.claude_client = None
        self.init_claude_client()
        
        # 文章整理用プロンプトテンプレート
        self.article_prompt_template = self.create_article_prompt_template()

    def load_whisper_model(self):
        """Whisperモデルを読み込み"""
        if self.model is None:
            print(f"🤖 Whisperモデル ({self.model_name}) を読み込み中...")
            try:
                self.model = whisper.load_model(self.model_name)
                print("✅ Whisperモデル読み込み完了")
            except Exception as e:
                print(f"❌ Whisperモデル読み込みエラー: {e}")
                sys.exit(1)

    def load_style_sample(self) -> str:
        """文体サンプルファイルを読み込み"""
        try:
            if os.path.exists(self.style_file_path):
                with open(self.style_file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    # 最初の50行程度の文体サンプルを抽出
                    lines = content.split('\n')
                    sample_lines = []
                    
                    for line in lines:
                        if line.strip() and not line.startswith('(') and not line.startswith('2025/'):
                            sample_lines.append(line)
                            if len(sample_lines) >= 50:
                                break
                    
                    return '\n'.join(sample_lines)
            else:
                # フォールバック用デフォルト文体
                return """マナミです。

今回は「SNS運用で疲れた時の対処法」について話します。

SNSを始めたばかりの頃は、毎日投稿することや「いいね」の数を気にしてしまいがちです。でも、そんな風に頑張りすぎていると、だんだん疲れてきてしまうんですよね。

私も最初の頃は、毎日何かを投稿しなければいけないと思っていました。でも、それってすごく大変なことなんです。毎日ネタを考えて、写真を撮って、文章を書いて...。気がつくと、SNSのことばかり考えている自分がいました。

そんな時に大切なのは「無理をしないこと」です。投稿の頻度を下げても大丈夫ですし、たまには休んでも構いません。フォロワーの方々は、あなたが無理をしていることよりも、自然体でいることを望んでいるはずです。"""
        except Exception as e:
            print(f"❌ 文体ファイル読み込みエラー: {e}")
            return "マナミです。\n\n今回は音声配信の内容について話します。"

    def init_claude_client(self):
        """Claude APIクライアントを初期化"""
        try:
            api_key = os.getenv('ANTHROPIC_API_KEY')
            if not api_key:
                print("⚠️ ANTHROPIC_API_KEYが設定されていません。.envファイルに設定してください。")
                self.claude_client = None
            else:
                self.claude_client = anthropic.Anthropic(api_key=api_key)
                print("✅ Claude API接続準備完了")
        except Exception as e:
            print(f"❌ Claude API初期化エラー: {e}")
            self.claude_client = None
    
    def create_article_prompt_template(self) -> str:
        """文章整理用プロンプトテンプレートを作成"""
        return f"""# 目的
あなたは優秀なライターです。音声配信の文字起こしテキストをnoteに掲載する記事に整理します。

# 最重要
以下の文体サンプルを参考に、話しているような自然な雰囲気を残しつつ、読みやすい文章に整えてください。

【文体学習済みサンプル】
{self.style_text[:1000]}...

# 要求仕様
全体を通して2000文字程度に収めるように構成してください。以下の構成に従って整理を行ってください。

1. 導入部（約150文字）:
   - 音声配信の主題を簡潔に紹介します。

2. 主要内容（約1600文字）:
   - 主要な議論やポイントを、明確かつ簡潔に整理します。
   - 元の話し方の雰囲気を残しつつ、読みやすく構成します。

3. 結論（約250文字）:
   - まとめと読者への呼びかけ。

# その他の制約
・冒頭は「マナミです。」から始めてください
・「ですます調」で統一してください
・内容から段落わけ、改行を適切に行ってください
・強調するところは「」で区切ってください
・子供は「子ども」と表記してください
・見出しはつけないでください
・不要な繰り返しや「えー」「あの」などの口癖は削除してください
・自然な会話調を残しつつ、文章として読みやすく整えてください

以下の文字起こしテキストを整理してください：

{{TRANSCRIPT}}"""

    def print_banner(self):
        """バナー表示"""
        print("🎙️" + "="*60)
        print("    Whisper + Claude Code 音声記事化システム")
        print("    💰 APIコストゼロ・ローカル処理対応")
        print("="*62)
        
        # 文体学習状況を表示
        if os.path.exists(self.style_file_path):
            print("✅ 文体学習済み: note本文.mdから文体を学習")
        else:
            print("⚠️ デフォルト文体を使用")
        print()

    def convert_audio_format(self, input_path: str, output_path: str) -> bool:
        """音声ファイルをWAVに変換"""
        try:
            cmd = [
                'ffmpeg', '-i', input_path, '-acodec', 'pcm_s16le', 
                '-ar', '16000', '-ac', '1', output_path, '-y'
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            return result.returncode == 0
        except Exception as e:
            print(f"❌ 音声変換エラー: {e}")
            return False

    def transcribe_with_whisper(self, audio_path: str) -> str:
        """Whisperによる音声文字起こし"""
        try:
            self.load_whisper_model()
            print("🗣️ Whisperで文字起こし中...")
            
            result = self.model.transcribe(audio_path, language="ja")
            transcript = result["text"]
            
            print(f"✅ 文字起こし完了 ({len(transcript)}文字)")
            return transcript
            
        except Exception as e:
            print(f"❌ Whisper文字起こしエラー: {e}")
            return None

    def process_with_claude(self, transcript: str) -> str:
        """Claude APIで文章を整理"""
        if not self.claude_client:
            print("❌ Claude APIが利用できません")
            return None
        
        try:
            print("🤖 Claude APIで文章整理中...")
            
            prompt = self.article_prompt_template.replace("{{TRANSCRIPT}}", transcript)
            
            response = self.claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=4000,
                temperature=0.3,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )
            
            article = response.content[0].text
            print(f"✅ Claude文章整理完了 ({len(article)}文字)")
            return article
            
        except Exception as e:
            print(f"❌ Claude API処理エラー: {e}")
            return None

    def save_results(self, transcript: str, article: str, filename: str):
        """結果をファイルに保存"""
        timestamp = Path(filename).stem
        
        # 文字起こし結果を保存
        transcript_file = f"{timestamp}_transcript.txt"
        with open(transcript_file, 'w', encoding='utf-8') as f:
            f.write(transcript)
        
        # 整理済み記事を保存
        article_file = f"{timestamp}_article.txt"
        with open(article_file, 'w', encoding='utf-8') as f:
            f.write(article)
        
        return transcript_file, article_file

    def display_results(self, transcript: str, article: str, filename: str):
        """結果を表示"""
        print("\n" + "="*80)
        print("✨ 記事作成完了！")
        print("="*80)
        print(f"📁 元ファイル: {filename}")
        print(f"📝 文字起こし文字数: {len(transcript)}文字")
        if article:
            print(f"📰 完成記事文字数: {len(article)}文字")
        print("="*80)
        
        if article:
            print("\n📰 完成記事:")
            print("-" * 80)
            print(article)
            print("-" * 80)
            
            # クリップボードにコピー
            try:
                pyperclip.copy(article)
                print("\n📋 記事をクリップボードにコピーしました！")
            except Exception as e:
                print(f"⚠️ クリップボードコピーに失敗: {e}")
        else:
            print("\n📄 文字起こし結果:")
            print("-" * 40)
            print(transcript)
        
        # ファイル保存のオプション
        save_option = input("\n💾 結果をファイルに保存しますか？ (y/N): ").lower().strip()
        if save_option in ['y', 'yes']:
            try:
                if article:
                    transcript_file, article_file = self.save_results(transcript, article, filename)
                    print(f"✅ 文字起こし: {transcript_file}")
                    print(f"✅ 完成記事: {article_file}")
                else:
                    timestamp = Path(filename).stem
                    transcript_file = f"{timestamp}_transcript.txt"
                    with open(transcript_file, 'w', encoding='utf-8') as f:
                        f.write(transcript)
                    print(f"✅ 文字起こし: {transcript_file}")
            except Exception as e:
                print(f"❌ 保存に失敗しました: {e}")

    def process_audio_file(self, audio_path: str):
        """音声ファイルの処理メイン"""
        try:
            filename = Path(audio_path).name
            print(f"🎵 処理開始: {filename}")
            
            # 音声ファイル変換
            wav_path = None
            file_ext = Path(audio_path).suffix.lower()
            
            if file_ext != '.wav':
                print("🔄 音声ファイルを変換中...")
                with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
                    wav_path = temp_wav.name
                
                if not self.convert_audio_format(audio_path, wav_path):
                    print("⚠️ 音声変換に失敗しました。元ファイルで試行します。")
                    wav_path = audio_path
            else:
                wav_path = audio_path
            
            # Whisperで文字起こし
            transcript = self.transcribe_with_whisper(wav_path)
            
            if not transcript:
                print("❌ 文字起こしに失敗しました")
                return
            
            # Claudeで文章整理
            article = None
            if self.claude_client:
                article = self.process_with_claude(transcript)
            
            # 結果表示
            self.display_results(transcript, article, filename)
            
        except Exception as e:
            print(f"❌ 処理中にエラーが発生しました: {e}")
        finally:
            # 一時ファイル削除
            if wav_path and wav_path != audio_path and os.path.exists(wav_path):
                os.remove(wav_path)

def main():
    transcriber = WhisperTranscriber()
    transcriber.print_banner()
    
    parser = argparse.ArgumentParser(description="Whisper音声文字起こし + Claude Code記事生成")
    parser.add_argument("audio_file", nargs="?", help="音声ファイルのパス")
    parser.add_argument("--model", default="base", choices=["tiny", "base", "small", "medium", "large"],
                       help="使用するWhisperモデル (default: base)")
    
    args = parser.parse_args()
    
    if args.model:
        transcriber.model_name = args.model
    
    if args.audio_file:
        # コマンドライン引数から
        if not os.path.exists(args.audio_file):
            print("❌ ファイルが見つかりません:", args.audio_file)
            return
        
        transcriber.process_audio_file(args.audio_file)
    else:
        # インタラクティブモード
        print("💡 使用方法:")
        print("   1. ターミナルにファイルをドラッグ&ドロップ")
        print("   2. またはコマンド: python whisper_transcriber.py [音声ファイルパス]")
        print("   3. オプション: --model [tiny/base/small/medium/large]")
        print()
        
        while True:
            try:
                file_path = input("🎙️ 音声ファイルのパスを入力 (または 'q' で終了): ").strip()
                
                if file_path.lower() == 'q':
                    break
                
                # ドラッグ&ドロップ時の引用符を削除
                file_path = file_path.strip('"').strip("'")
                
                if not os.path.exists(file_path):
                    print("❌ ファイルが見つかりません")
                    continue
                
                transcriber.process_audio_file(file_path)
                
                # 続行確認
                continue_option = input("\n🔄 別のファイルを処理しますか？ (y/N): ").lower().strip()
                if continue_option not in ['y', 'yes']:
                    break
                
            except KeyboardInterrupt:
                print("\n👋 終了します")
                break
            except Exception as e:
                print(f"❌ エラー: {e}")

if __name__ == "__main__":
    main()